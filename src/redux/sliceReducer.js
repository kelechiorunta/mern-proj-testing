import { createSlice } from "@reduxjs/toolkit";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query";


import axios from "axios";

// Initial state
const initialState = {
  value: 0,
  modulusVal: 0,
  api: {loading:false, error:'', data:[]}
};

// Create the slice reducer
const sliceReducer = createSlice({
  name: "counter",
  initialState,
  reducers: {
    increment: (state = initialState, action) => {
      state.value += 1;
    },
    decrement: (state, action) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
    getModulus: (state, action) => {
      state.modulusVal = Math.floor(state.value % action.payload) ;
    },
    apisuccess: (state, action) => {
        state.api.error = ''
        state.api.loading = false
        state.api.data = (action.payload)
    }, 
    apifailure:(state,action) => {
        state.api.error = action.payload
        state.api.loading = true
        state.api.data = []
    }
  },
});

// Export actions
export const { increment, incrementByAmount, decrement, getModulus, apisuccess, apifailure} = sliceReducer.actions;

/**
 * 
 * @param {A Redux Thunk is a middleware javascript function that handles asynchronous or side actions/operations with reducer actions.
 * It accepts the dispatch and getState argumnents in the async callback function to handle asynchronous or side operations
 * by dispatching reducer actions and accessing the updated state value from the getState API}
 * @returns 
 */

// Thunk to increment value by a specific amount asynchronously
export const asyncIncrementByAmount = (value) => (dispatch, getState) => {
  // Simulate async behavior (e.g., fetching data or using setTimeout)
  setInterval(() => {
    const currentValue = getState().counter.value;
    dispatch(incrementByAmount(value)); // Dispatch incrementByAmount
    dispatch(getModulus((100*value))); // Immediately calculate modulus after increment
  }, 5000);
};

// Thunk to handle async api operation
export const getApiService = (endpoint) => async (dispatch, getState) => {
  try {
    // Simulate async operation with a promise and setTimeout
    const resolvedResponse = await axios.get(endpoint)
    dispatch(apisuccess(resolvedResponse.data))

    // Get the updated value from the state
    const currentValue = getState().counter.value;

  } catch (error) {
    console.error("Error during async operation:", error);
    dispatch(apifailure("Failed api service"))
  }
};

export const pokemonApi = createApi({
    reducerPath: 'pokemonApi',
    baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),
    endpoints: (builder) => ({
      getPokemonByName: builder.query({
        query: (name) => `pokemon/${name}`,
      }),
    }),
  });
  
  // Export hooks generated by RTK Query
  export const { useGetPokemonByNameQuery } = pokemonApi;

// Selector to get the current value
export const updatedValue = (state) => state.counter.value;

// Export the reducer
export default sliceReducer.reducer;